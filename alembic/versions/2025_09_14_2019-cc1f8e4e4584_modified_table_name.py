"""modified table name

Revision ID: cc1f8e4e4584
Revises: 53c79f2348c8
Create Date: 2025-09-14 20:19:08.978876

"""

from typing import Sequence, Union
import sqlmodel
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "cc1f8e4e4584"
down_revision: Union[str, Sequence[str], None] = "53c79f2348c8"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # 1. Create new table
    op.create_table(
        "consumer_requirement",
        sa.Column("con_req_id", sa.Uuid(), nullable=False),
        sa.Column("ccm_id", sa.Uuid(), nullable=False),
        sa.Column("created_on", sa.DateTime(), nullable=False),
        sa.Column("creq_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "consumer_requirement_descriptin",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column(
            "proposed_recommandation",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["ccm_id"], ["clientconsumer.ccm_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("con_req_id"),
    )
    op.create_index(
        op.f("ix_consumer_requirement_ccm_id"),
        "consumer_requirement",
        ["ccm_id"],
        unique=False,
    )

    # 2. Drop the old foreign key first
    op.drop_constraint(
        "consumer_requirement_products_con_req_id_fkey",
        "consumer_requirement_products",
        type_="foreignkey",
    )

    # 3. Now safely drop the old table
    op.drop_index(op.f("ix_client_requirement_ccm_id"), table_name="client_requirement")
    op.drop_table("client_requirement")

    # 4. Create new FK to the new table
    op.create_foreign_key(
        None,
        "consumer_requirement_products",
        "consumer_requirement",
        ["con_req_id"],
        ["con_req_id"],
        ondelete="CASCADE",
    )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "consumer_requirement_products", type_="foreignkey")
    op.create_foreign_key(
        op.f("consumer_requirement_products_con_req_id_fkey"),
        "consumer_requirement_products",
        "client_requirement",
        ["con_req_id"],
        ["con_req_id"],
        ondelete="CASCADE",
    )
    op.create_table(
        "client_requirement",
        sa.Column("con_req_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("ccm_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_on", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("creq_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "consumer_requirement_descriptin",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "proposed_recommandation", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["ccm_id"],
            ["clientconsumer.ccm_id"],
            name=op.f("client_requirement_ccm_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("con_req_id", name=op.f("client_requirement_pkey")),
    )
    op.create_index(
        op.f("ix_client_requirement_ccm_id"),
        "client_requirement",
        ["ccm_id"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_consumer_requirement_ccm_id"), table_name="consumer_requirement"
    )
    op.drop_table("consumer_requirement")
    # ### end Alembic commands ###
